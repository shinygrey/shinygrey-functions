# Welcome to Serverless!

service: shinygrey-functions
# app and org for use with https://app.serverless.com/
#app: your-app-name
#org: your-org-name

frameworkVersion: '2'

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  region: 'eu-west-2'
  tags:
    company: "shinygrey"
  environment:
    STAGE: ${self:provider.stage}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
        - ssm:GetParametersByPath
        - ssm:PutParameter
      Resource:
        - "arn:aws:ssm:${self:provider.region}:206914371811:parameter/shinygrey/*"

package:
  individually: true

functions:
  hello-clojure:
    runtime: java11 #https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html
    handler: hello_clojure.core::handleRequest
    package:
      artifact: hello-clojure/target/deploy-package-standalone.jar
    events:
      - http:
          path: /hello/clojure
          method: get
          cors: true

  hello-csharp:
    runtime: dotnetcore3.1
    handler: AwsDotnetCsharp::AwsDotnetCsharp.Handler::HelloWorld
    package:
      artifact: hello-csharp/bin/release/netcoreapp3.1/deploy-package.zip
    events:
      - http:
          path: /hello/csharp
          method: get
          cors: true

  hello-fsharp:
    runtime: dotnetcore3.1
    handler: FsharpHandlers::AwsDotnetFsharp.Handler::hello
    package:
      artifact: hello-fsharp/bin/Release/netcoreapp3.1/deploy-package.zip
    events:
      - http: # https://www.nuget.org/packages/Amazon.Lambda.APIGatewayEvents/
          path: /hello/fsharp
          method: get
          cors: true

  hello-ruby:
    runtime: ruby2.7
    handler: hello-ruby/lambda-hello-ruby.LambdaFunctions::Handler.process
    package:
      exclude:
        - "*/**"
        - package.json
        - package-lock.json
      include:
        - hello-ruby/**
    events:
      - http:
          path: /hello/ruby
          method: get
          cors: true

  instagram-auth:
    handler: igauth/lambda-igauth.handler
    runtime: nodejs12.x
    package:
      exclude:
        - "*/**"
      include:
        - igauth/**
    events:
      - http:
          path: /igauth/auth
          method: get
          cors: true
      - http:
          path: /igauth/deauth
          method: get
          cors: true
      - http:
          path: /igauth/ddel
          method: get
          cors: true

#  twitter-get:
#    runtime: java11 #https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html
#    handler: twitter_get.core::handleRequest
#    package:
#      artifact: twitter-get/target/deploy-package-standalone.jar
#    events:
#      - http:
#          path: /twitter
 #         method: get
#          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
